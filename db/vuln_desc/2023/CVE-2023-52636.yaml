cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    libceph: just wait for more data to be available on the socket


    A short read may occur while reading the message footer from the

    socket.  Later, when the socket is ready for another read, the

    messenger invokes all read_partial_*() handlers, including

    read_partial_sparse_msg_data().  The expectation is that

    read_partial_sparse_msg_data() would bail, allowing the messenger to

    invoke read_partial() for the footer and pick up where it left off.


    However read_partial_sparse_msg_data() violates that and ends up

    calling into the state machine in the OSD client.  The sparse-read

    state machine assumes that it''s a new op and interprets some piece of

    the footer as the sparse-read header and returns bogus extents/data

    length, etc.


    To determine whether read_partial_sparse_msg_data() should bail, let''s

    reuse cursor->total_resid.  Because once it reaches to zero that means

    all the extents and data have been successfully received in last read,

    else it could break out when partially reading any of the extents and

    data.  And then osd_sparse_read() could continue where it left off.


    [ idryomov: changelog ]'
- lang: es
  value: "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: \"libceph:\
    \ just wait for more data to be available on the socket\". Puede ocurrir una lectura\
    \ breve mientras se lee el pie de p\xE1gina del mensaje desde el socket. M\xE1\
    s tarde, cuando el socket est\xE1 listo para otra lectura, el mensajero invoca\
    \ todos los controladores read_partial_*(), incluido read_partial_sparse_msg_data().\
    \ La expectativa es que read_partial_sparse_msg_data() saldr\xEDa, permitiendo\
    \ al mensajero invocar read_partial() para el pie de p\xE1gina y continuar donde\
    \ lo dej\xF3. Sin embargo, read_partial_sparse_msg_data() viola eso y termina\
    \ llamando a la m\xE1quina de estado en el cliente OSD. La m\xE1quina de estado\
    \ de lectura dispersa asume que es una nueva operaci\xF3n e interpreta alguna\
    \ parte del pie de p\xE1gina como el encabezado de lectura dispersa y devuelve\
    \ extensiones/longitud de datos falsas, etc. Para determinar si read_partial_sparse_msg_data()\
    \ debe rescatarse, reutilicemos cursor-&gt;total_resid . Porque una vez que llega\
    \ a cero, significa que todas las extensiones y datos se recibieron correctamente\
    \ en la \xFAltima lectura; de lo contrario, podr\xEDa romperse al leer parcialmente\
    \ cualquiera de las extensiones y datos. Y luego osd_sparse_read() podr\xEDa continuar\
    \ donde lo dej\xF3. [idryomov: registro de cambios]"
id: CVE-2023-52636
lastModified: '2024-04-02T12:50:42.233'
metrics: {}
published: '2024-04-02T07:15:41.337'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/8e46a2d068c92a905d01cbb018b00d66991585ab
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/bd9442e553ab8bf74b8be3b3c0a43bf4af4dc9b8
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/da9c33a70f095d5d55c36d0bfeba969e31de08ae
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
