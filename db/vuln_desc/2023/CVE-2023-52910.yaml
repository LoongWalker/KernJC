cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    iommu/iova: Fix alloc iova overflows issue


    In __alloc_and_insert_iova_range, there is an issue that retry_pfn

    overflows. The value of iovad->anchor.pfn_hi is ~0UL, then when

    iovad->cached_node is iovad->anchor, curr_iova->pfn_hi + 1 will

    overflow. As a result, if the retry logic is executed, low_pfn is

    updated to 0, and then new_pfn < low_pfn returns false to make the

    allocation successful.


    This issue occurs in the following two situations:

    1. The first iova size exceeds the domain size. When initializing

    iova domain, iovad->cached_node is assigned as iovad->anchor. For

    example, the iova domain size is 10M, start_pfn is 0x1_F000_0000,

    and the iova size allocated for the first time is 11M. The

    following is the log information, new->pfn_lo is smaller than

    iovad->cached_node.


    Example log as follows:

    [  223.798112][T1705487] sh: [name:iova&]__alloc_and_insert_iova_range

    start_pfn:0x1f0000,retry_pfn:0x0,size:0xb00,limit_pfn:0x1f0a00

    [  223.799590][T1705487] sh: [name:iova&]__alloc_and_insert_iova_range

    success start_pfn:0x1f0000,new->pfn_lo:0x1efe00,new->pfn_hi:0x1f08ff


    2. The node with the largest iova->pfn_lo value in the iova domain

    is deleted, iovad->cached_node will be updated to iovad->anchor,

    and then the alloc iova size exceeds the maximum iova size that can

    be allocated in the domain.


    After judging that retry_pfn is less than limit_pfn, call retry_pfn+1

    to fix the overflow issue.'
- lang: es
  value: "En el kernel de Linux, se resolvi\xF3 la siguiente vulnerabilidad: iommu/iova:\
    \ soluciona el problema de desbordamiento de alloc iova. En __alloc_and_insert_iova_range,\
    \ hay un problema que retry_pfn se desborda. El valor de iovad-&gt;anchor.pfn_hi\
    \ es ~0UL, luego, cuando iovad-&gt;cached_node es iovad-&gt;anchor, curr_iova-&gt;pfn_hi\
    \ + 1 se desbordar\xE1. Como resultado, si se ejecuta la l\xF3gica de reintento,\
    \ low_pfn se actualiza a 0 y luego new_pfn &lt; low_pfn devuelve falso para que\
    \ la asignaci\xF3n sea exitosa. Este problema ocurre en las dos situaciones siguientes:\
    \ 1. El tama\xF1o del primer iova excede el tama\xF1o del dominio. Al inicializar\
    \ el dominio iova, iovad-&gt;cached_node se asigna como iovad-&gt;anchor. Por\
    \ ejemplo, el tama\xF1o del dominio iova es 10 M, start_pfn es 0x1_F000_0000 y\
    \ el tama\xF1o de iova asignado por primera vez es 11 M. La siguiente es la informaci\xF3\
    n de registro, new-&gt;pfn_lo es m\xE1s peque\xF1o que iovad-&gt;cached_node.\
    \ Registro de ejemplo como sigue: [ 223.798112][T1705487] sh: [name:iova&amp;]__alloc_and_insert_iova_range\
    \ start_pfn:0x1f0000,retry_pfn:0x0,size:0xb00,limit_pfn:0x1f0a00 [ 223.799590][T1705487]\
    \ [nombre:iova&amp;]__alloc_and_insert_iova_range \xE9xito start_pfn :0x1f0000,new-&gt;pfn_lo:0x1efe00,new-&gt;pfn_hi:0x1f08ff\
    \ 2. El nodo con el valor iova-&gt;pfn_lo m\xE1s grande en el dominio iova se\
    \ elimina, iovad-&gt;cached_node se actualizar\xE1 a iovad-&gt;anchor y luego\
    \ el tama\xF1o de alloc iova excede el tama\xF1o m\xE1ximo de iova que se puede\
    \ asignar en el dominio. Despu\xE9s de juzgar que retry_pfn es menor que limit_pfn,\
    \ llame a retry_pfn+1 para solucionar el problema de desbordamiento."
id: CVE-2023-52910
lastModified: '2024-08-21T12:30:33.697'
metrics: {}
published: '2024-08-21T07:15:06.910'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/61cbf790e7329ed78877560be7136f0b911bba7f
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/c929a230c84441e400c32e7b7b4ab763711fb63e
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/dcdb3ba7e2a8caae7bfefd603bc22fd0ce9a389c
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Undergoing Analysis
