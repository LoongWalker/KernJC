descriptions:
- lang: en
  value: "In the Linux kernel, the following vulnerability has been resolved:\n\n\
    mac80211-hwsim: fix late beacon hrtimer handling\n\nThomas explained in https://lore.kernel.org/r/87mtoeb4hb.ffs@tglx\n\
    that our handling of the hrtimer here is wrong: If the timer fires\nlate (e.g.\
    \ due to vCPU scheduling, as reported by Dmitry/syzbot)\nthen it tries to actually\
    \ rearm the timer at the next deadline,\nwhich might be in the past already:\n\
    \n 1          2          3          N          N+1\n |          |          | \
    \  ...    |          |\n\n ^ intended to fire here (1)\n            ^ next deadline\
    \ here (2)\n                                      ^ actually fired here\n\nThe\
    \ next time it fires, it's later, but will still try to schedule\nfor the next\
    \ deadline (now 3), etc. until it catches up with N,\nbut that might take a long\
    \ time, causing stalls etc.\n\nNow, all of this is simulation, so we just have\
    \ to fix it, but\nnote that the behaviour is wrong even per spec, since there's\
    \ no\nvalue then in sending all those beacons unaligned - they should be\naligned\
    \ to the TBTT (1, 2, 3, ... in the picture), and if we're a\nbit (or a lot) late,\
    \ then just resume at that point.\n\nTherefore, change the code to use hrtimer_forward_now()\
    \ which will\nensure that the next firing of the timer would be at N+1 (in the\n\
    picture), i.e. the next interval point after the current time."
- lang: es
  value: "En el kernel de Linux, se resolvi\xF3 la siguiente vulnerabilidad: mac80211-hwsim:\
    \ corrige el manejo tard\xEDo del hrtimer de baliza. Thomas explic\xF3 en https://lore.kernel.org/r/87mtoeb4hb.ffs@tglx\
    \ que nuestro manejo del hrtimer aqu\xED es incorrecto : Si el temporizador se\
    \ activa tarde (por ejemplo, debido a la programaci\xF3n de vCPU, seg\xFAn lo\
    \ informado por Dmitry/syzbot), entonces intenta rearmar el temporizador en la\
    \ pr\xF3xima fecha l\xEDmite, que podr\xEDa haber sido ya en el pasado: 1 2 3\
    \ N N+1 | | | ... | | ^ intenci\xF3n de disparar aqu\xED (1) ^ pr\xF3xima fecha\
    \ l\xEDmite aqu\xED (2) ^ realmente disparado aqu\xED La pr\xF3xima vez que se\
    \ active, ser\xE1 m\xE1s tarde, pero a\xFAn as\xED intentar\xE1 programar la pr\xF3\
    xima fecha l\xEDmite (ahora 3), etc. hasta que se ponga al d\xEDa N, pero eso\
    \ podr\xEDa llevar mucho tiempo, causando bloqueos, etc. Ahora, todo esto es simulaci\xF3\
    n, as\xED que solo tenemos que arreglarlo, pero tenga en cuenta que el comportamiento\
    \ es incorrecto incluso seg\xFAn la especificaci\xF3n, ya que no tiene ning\xFA\
    n valor enviar todos esos balizas no alineadas: deben estar alineadas con el TBTT\
    \ (1, 2, 3, ... en la imagen), y si llegamos un poco (o mucho) tarde, simplemente\
    \ reanudemos en ese punto. Por lo tanto, cambie el c\xF3digo para usar hrtimer_forward_now(),\
    \ lo que garantizar\xE1 que el siguiente disparo del temporizador sea en N+1 (en\
    \ la imagen), es decir, el siguiente punto del intervalo despu\xE9s de la hora\
    \ actual."
id: CVE-2021-47396
lastModified: '2024-05-21T16:54:26.047'
metrics: {}
published: '2024-05-21T15:15:24.920'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/2c204cf594df3b9468368dc9d0b24d482d93cda7
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/313bbd1990b6ddfdaa7da098d0c56b098a833572
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/9bee85de2c8155388c09a2e1530a243ec1c96f05
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/ed2adf69e29848d1eb9df99633dde655421c92ed
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
