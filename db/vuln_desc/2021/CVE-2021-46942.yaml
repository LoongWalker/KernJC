configurations:
- nodes:
  - cpeMatch:
    - criteria: cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*
      matchCriteriaId: C3814FA3-8141-4313-A852-8C4212BE12AD
      versionEndExcluding: 5.12.3
      versionStartIncluding: 5.12.0
      vulnerable: true
    negate: false
    operator: OR
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    io_uring: fix shared sqpoll cancellation hangs


    [  736.982891] INFO: task iou-sqp-4294:4295 blocked for more than 122 seconds.

    [  736.982897] Call Trace:

    [  736.982901]  schedule+0x68/0xe0

    [  736.982903]  io_uring_cancel_sqpoll+0xdb/0x110

    [  736.982908]  io_sqpoll_cancel_cb+0x24/0x30

    [  736.982911]  io_run_task_work_head+0x28/0x50

    [  736.982913]  io_sq_thread+0x4e3/0x720


    We call io_uring_cancel_sqpoll() one by one for each ctx either in

    sq_thread() itself or via task works, and it''s intended to cancel all

    requests of a specified context. However the function uses per-task

    counters to track the number of inflight requests, so it counts more

    requests than available via currect io_uring ctx and goes to sleep for

    them to appear (e.g. from IRQ), that will never happen.


    Cancel a bit more than before, i.e. all ctxs that share sqpoll

    and continue to use shared counters. Don''t forget that we should not

    remove ctx from the list before running that task_work sqpoll-cancel,

    otherwise the function wouldn''t be able to find the context and will

    hang.'
- lang: es
  value: "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: io_uring:\
    \ corrige bloqueos de cancelaci\xF3n de sqpoll compartido [736.982891] INFORMACI\xD3\
    N: tarea iou-sqp-4294:4295 bloqueada durante m\xE1s de 122 segundos. [ 736.982897]\
    \ Seguimiento de llamadas: [ 736.982901] agenda+0x68/0xe0 [ 736.982903] io_uring_cancel_sqpoll+0xdb/0x110\
    \ [ 736.982908] io_sqpoll_cancel_cb+0x24/0x30 [ 736.982911] io_run_task_work_head+0x28/0x50\
    \ [ 736.982913] io_sq_thread+0x4e3/0x720 Llamamos a io_uring_cancel_sqpoll( )\
    \ uno por uno para cada ctx, ya sea en sq_thread() o mediante tareas, y est\xE1\
    \ destinado a cancelar todas las solicitudes de un contexto espec\xEDfico. Sin\
    \ embargo, la funci\xF3n utiliza contadores por tarea para rastrear la cantidad\
    \ de solicitudes en curso, por lo que cuenta m\xE1s solicitudes de las disponibles\
    \ a trav\xE9s de currect io_uring ctx y se pone en suspensi\xF3n para que aparezcan\
    \ (por ejemplo, desde IRQ), eso nunca suceder\xE1. Cancele un poco m\xE1s que\
    \ antes, es decir, todos los ctx que comparten sqpoll y contin\xFAan usando contadores\
    \ compartidos. No olvide que no debemos eliminar ctx de la lista antes de ejecutar\
    \ task_work sqpoll-cancel; de lo contrario, la funci\xF3n no podr\xE1 encontrar\
    \ el contexto y se bloquear\xE1."
id: CVE-2021-46942
lastModified: '2024-04-10T19:56:14.227'
metrics:
  cvssMetricV31:
  - cvssData:
      attackComplexity: LOW
      attackVector: LOCAL
      availabilityImpact: HIGH
      baseScore: 5.5
      baseSeverity: MEDIUM
      confidentialityImpact: NONE
      integrityImpact: NONE
      privilegesRequired: LOW
      scope: UNCHANGED
      userInteraction: NONE
      vectorString: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H
      version: '3.1'
    exploitabilityScore: 1.8
    impactScore: 3.6
    source: nvd@nist.gov
    type: Primary
published: '2024-02-27T19:04:06.017'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  tags:
  - Patch
  url: https://git.kernel.org/stable/c/734551df6f9bedfbefcd113ede665945e9de0b99
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  tags:
  - Patch
  url: https://git.kernel.org/stable/c/cb5e0b3d0f993a6268c1a2c7ede2f9aa0c17ef68
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Analyzed
weaknesses:
- description:
  - lang: en
    value: NVD-CWE-noinfo
  source: nvd@nist.gov
  type: Primary
