descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    bpf: Fix kernel address leakage in atomic fetch


    The change in commit 37086bfdc737 ("bpf: Propagate stack bounds to registers

    in atomics w/ BPF_FETCH") around check_mem_access() handling is buggy since

    this would allow for unprivileged users to leak kernel pointers. For example,

    an atomic fetch/and with -1 on a stack destination which holds a spilled

    pointer will migrate the spilled register type into a scalar, which can then

    be exported out of the program (since scalar != pointer) by dumping it into

    a map value.


    The original implementation of XADD was preventing this situation by using

    a double call to check_mem_access() one with BPF_READ and a subsequent one

    with BPF_WRITE, in both cases passing -1 as a placeholder value instead of

    register as per XADD semantics since it didn''t contain a value fetch. The

    BPF_READ also included a check in check_stack_read_fixed_off() which rejects

    the program if the stack slot is of __is_pointer_value() if dst_regno < 0.

    The latter is to distinguish whether we''re dealing with a regular stack spill/

    fill or some arithmetical operation which is disallowed on non-scalars, see

    also 6e7e63cbb023 ("bpf: Forbid XADD on spilled pointers for unprivileged

    users") for more context on check_mem_access() and its handling of placeholder

    value -1.


    One minimally intrusive option to fix the leak is for the BPF_FETCH case to

    initially check the BPF_READ case via check_mem_access() with -1 as register,

    followed by the actual load case with non-negative load_reg to propagate

    stack bounds to registers.'
- lang: es
  value: "En el kernel de Linux, se resolvi\xF3 la siguiente vulnerabilidad: bpf:\
    \ corrige la fuga de la direcci\xF3n del kernel en la recuperaci\xF3n at\xF3mica.\
    \ El cambio en el commit 37086bfdc737 (\"bpf: propaga los l\xEDmites de la pila\
    \ a los registros en at\xF3micos con BPF_FETCH\") alrededor del manejo de check_mem_access()\
    \ tiene errores ya que esto permitir\xEDa a usuarios sin privilegios filtrar punteros\
    \ del kernel. Por ejemplo, una recuperaci\xF3n at\xF3mica/y con -1 en un destino\
    \ de pila que contiene un puntero derramado migrar\xE1 el tipo de registro derramado\
    \ a un escalar, que luego se puede exportar fuera del programa (ya que escalar!\
    \ = puntero) volc\xE1ndolo en un valor de mapa. La implementaci\xF3n original\
    \ de XADD evitaba esta situaci\xF3n mediante el uso de una llamada doble a check_mem_access(),\
    \ una con BPF_READ y otra posterior con BPF_WRITE, en ambos casos pasando -1 como\
    \ valor de marcador de posici\xF3n en lugar de registrarse seg\xFAn la sem\xE1\
    ntica de XADD, ya que no lo hac\xEDa contener una recuperaci\xF3n de valor. BPF_READ\
    \ tambi\xE9n incluy\xF3 una verificaci\xF3n en check_stack_read_fixed_off() que\
    \ rechaza el programa si la ranura de la pila es de __is_pointer_value() si dst_regno\
    \ &lt; 0. Esto \xFAltimo es para distinguir si estamos tratando con un derrame/llenado\
    \ de pila regular o alguna operaci\xF3n aritm\xE9tica que no est\xE1 permitido\
    \ en valores no escalares, consulte tambi\xE9n 6e7e63cbb023 (\"bpf: Prohibir XADD\
    \ en punteros dispersos para usuarios sin privilegios\") para obtener m\xE1s contexto\
    \ sobre check_mem_access() y su manejo del valor del marcador de posici\xF3n -1.\
    \ Una opci\xF3n m\xEDnimamente intrusiva para solucionar la fuga es que el caso\
    \ BPF_FETCH verifique inicialmente el caso BPF_READ mediante check_mem_access()\
    \ con -1 como registro, seguido del caso de carga real con load_reg no negativo\
    \ para propagar los l\xEDmites de la pila a los registros."
id: CVE-2021-47608
lastModified: '2024-06-20T12:43:25.663'
metrics: {}
published: '2024-06-19T15:15:55.360'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/423628125a484538111c2c6d9bb1588eb086053b
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/7d3baf0afa3aa9102d6a521a8e4c41888bb79882
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
