cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    net: dsa: ar9331: register the mdiobus under devres


    As explained in commits:

    74b6d7d13307 ("net: dsa: realtek: register the MDIO bus under devres")

    5135e96a3dd2 ("net: dsa: don''t allocate the slave_mii_bus using devres")


    mdiobus_free() will panic when called from devm_mdiobus_free() <-

    devres_release_all() <- __device_release_driver(), and that mdiobus was

    not previously unregistered.


    The ar9331 is an MDIO device, so the initial set of constraints that I

    thought would cause this (I2C or SPI buses which call ->remove on

    ->shutdown) do not apply. But there is one more which applies here.


    If the DSA master itself is on a bus that calls ->remove from ->shutdown

    (like dpaa2-eth, which is on the fsl-mc bus), there is a device link

    between the switch and the DSA master, and device_links_unbind_consumers()

    will unbind the ar9331 switch driver on shutdown.


    So the same treatment must be applied to all DSA switch drivers, which

    is: either use devres for both the mdiobus allocation and registration,

    or don''t use devres at all.


    The ar9331 driver doesn''t have a complex code structure for mdiobus

    removal, so just replace of_mdiobus_register with the devres variant in

    order to be all-devres and ensure that we don''t free a still-registered

    bus.'
- lang: es
  value: "En el kernel de Linux se ha resuelto la siguiente vulnerabilidad: net: dsa:\
    \ ar9331: registrar el mdiobus en devres Como se explica en commits: 74b6d7d13307\
    \ (\"net: dsa: realtek: registrar el bus MDIO en devres\") 5135e96a3dd2 (\"net:\
    \ dsa: no asigne el Slave_mii_bus usando devres\") mdiobus_free() entrar\xE1 en\
    \ p\xE1nico cuando se llame desde devm_mdiobus_free() &lt;- devres_release_all()\
    \ &lt;- __device_release_driver(), y ese mdiobus no fue anulado previamente. El\
    \ ar9331 es un dispositivo MDIO, por lo que el conjunto inicial de restricciones\
    \ que pens\xE9 que causar\xEDan esto (buses I2C o SPI que llaman -&gt;eliminar\
    \ en -&gt;apagar) no se aplican. Pero hay algo m\xE1s que se aplica aqu\xED. Si\
    \ el maestro DSA est\xE1 en un bus que llama -&gt;remove from -&gt;shutdown (como\
    \ dpaa2-eth, que est\xE1 en el bus fsl-mc), hay un enlace de dispositivo entre\
    \ el conmutador y el maestro DSA, y device_links_unbind_consumers( ) desvincular\xE1\
    \ el controlador del interruptor ar9331 al apagar. Por lo tanto, se debe aplicar\
    \ el mismo tratamiento a todos los controladores de conmutador DSA, que es: usar\
    \ devres tanto para la asignaci\xF3n como para el registro de mdiobus, o no usar\
    \ devres en absoluto. El controlador ar9331 no tiene una estructura de c\xF3digo\
    \ compleja para la eliminaci\xF3n de mdiobus, as\xED que simplemente reemplace\
    \ of_mdiobus_register con la variante devres para que sea todo devres y garantizar\
    \ que no liberemos un bus a\xFAn registrado."
id: CVE-2022-48817
lastModified: '2024-07-16T13:43:58.773'
metrics: {}
published: '2024-07-16T12:15:05.747'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/475ce5dcf2d88fd4f3c213a0ac944e3e40702970
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/50facd86e9fbc4b93fe02e5fe05776047f45dbfb
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/aae1c6a1d3d696fc33b609fb12fe744a556d1dc5
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/f1842a8cb71de4d7eb75a86f76e88c7ee739218c
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
