configurations:
- nodes:
  - cpeMatch:
    - criteria: cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*
      matchCriteriaId: F3EC14C1-75C4-4ECD-94D3-EB9151F1007E
      versionEndExcluding: 5.4.182
      versionStartIncluding: '5.4'
      vulnerable: true
    - criteria: cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*
      matchCriteriaId: 1A95B717-3110-4D4F-B8FC-373919BB514D
      versionEndExcluding: 5.10.103
      versionStartIncluding: '5.5'
      vulnerable: true
    - criteria: cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*
      matchCriteriaId: 9AB342AE-A62E-4947-A6EA-511453062B2B
      versionEndExcluding: 5.15.26
      versionStartIncluding: '5.11'
      vulnerable: true
    - criteria: cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*
      matchCriteriaId: C76BAB21-7F23-4AD8-A25F-CA7B262A2698
      versionEndExcluding: 5.16.12
      versionStartIncluding: '5.16'
      vulnerable: true
    negate: false
    operator: OR
cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    netfilter: nf_tables: fix memory leak during stateful obj update


    stateful objects can be updated from the control plane.

    The transaction logic allocates a temporary object for this purpose.


    The ->init function was called for this object, so plain kfree() leaks

    resources. We must call ->destroy function of the object.


    nft_obj_destroy does this, but it also decrements the module refcount,

    but the update path doesn''t increment it.


    To avoid special-casing the update object release, do module_get for

    the update case too and release it via nft_obj_destroy().'
- lang: es
  value: "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: netfilter:\
    \ nf_tables: corrige la p\xE9rdida de memoria durante la actualizaci\xF3n de objetos\
    \ con estado. Los objetos con estado se pueden actualizar desde el plano de control.\
    \ La l\xF3gica de transacci\xF3n asigna un objeto temporal para este prop\xF3\
    sito. La funci\xF3n -&gt;init fue llamada para este objeto, por lo que kfree()\
    \ simple pierde recursos. Debemos llamar a la funci\xF3n -&gt;destruir del objeto.\
    \ nft_obj_destroy hace esto, pero tambi\xE9n disminuye el recuento del m\xF3dulo,\
    \ pero la ruta de actualizaci\xF3n no lo incrementa. Para evitar usar may\xFA\
    sculas y min\xFAsculas especiales en la versi\xF3n del objeto de actualizaci\xF3\
    n, utilice module_get para el caso de actualizaci\xF3n tambi\xE9n y lib\xE9rela\
    \ mediante nft_obj_destroy()."
id: CVE-2022-48933
lastModified: '2024-08-23T01:50:09.313'
metrics:
  cvssMetricV31:
  - cvssData:
      attackComplexity: LOW
      attackVector: LOCAL
      availabilityImpact: HIGH
      baseScore: 5.5
      baseSeverity: MEDIUM
      confidentialityImpact: NONE
      integrityImpact: NONE
      privilegesRequired: LOW
      scope: UNCHANGED
      userInteraction: NONE
      vectorString: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H
      version: '3.1'
    exploitabilityScore: 1.8
    impactScore: 3.6
    source: nvd@nist.gov
    type: Primary
published: '2024-08-22T04:15:16.143'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  tags:
  - Patch
  url: https://git.kernel.org/stable/c/34bb90e407e3288f610558beaae54ecaa32b11c4
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  tags:
  - Patch
  url: https://git.kernel.org/stable/c/53026346a94c43f35c32b18804041bc483271d87
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  tags:
  - Patch
  url: https://git.kernel.org/stable/c/7e9880e81d3fd6a43c202f205717485290432826
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  tags:
  - Patch
  url: https://git.kernel.org/stable/c/dad3bdeef45f81a6e90204bcc85360bb76eccec7
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  tags:
  - Patch
  url: https://git.kernel.org/stable/c/e96e204ee6fa46702f6c94c3c69a09e69e0eac52
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Analyzed
weaknesses:
- description:
  - lang: en
    value: CWE-401
  source: nvd@nist.gov
  type: Primary
