cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    drm/msm/dp: do not complete dp_aux_cmd_fifo_tx() if irq is not for aux transfer


    There are 3 possible interrupt sources are handled by DP controller,

    HPDstatus, Controller state changes and Aux read/write transaction.

    At every irq, DP controller have to check isr status of every interrupt

    sources and service the interrupt if its isr status bits shows interrupts

    are pending. There is potential race condition may happen at current aux

    isr handler implementation since it is always complete dp_aux_cmd_fifo_tx()

    even irq is not for aux read or write transaction. This may cause aux read

    transaction return premature if host aux data read is in the middle of

    waiting for sink to complete transferring data to host while irq happen.

    This will cause host''s receiving buffer contains unexpected data. This

    patch fixes this problem by checking aux isr and return immediately at

    aux isr handler if there are no any isr status bits set.


    Current there is a bug report regrading eDP edid corruption happen during

    system booting up. After lengthy debugging to found that VIDEO_READY

    interrupt was continuously firing during system booting up which cause

    dp_aux_isr() to complete dp_aux_cmd_fifo_tx() prematurely to retrieve data

    from aux hardware buffer which is not yet contains complete data transfer

    from sink. This cause edid corruption.


    Follows are the signature at kernel logs when problem happen,

    EDID has corrupt header

    panel-simple-dp-aux aux-aea0000.edp: Couldn''t identify panel via EDID


    Changes in v2:

    -- do complete if (ret == IRQ_HANDLED) ay dp-aux_isr()

    -- add more commit text


    Changes in v3:

    -- add Stephen suggested

    -- dp_aux_isr() return IRQ_XXX back to caller

    -- dp_ctrl_isr() return IRQ_XXX back to caller


    Changes in v4:

    -- split into two patches


    Changes in v5:

    -- delete empty line between tags


    Changes in v6:

    -- remove extra "that" and fixed line more than 75 char at commit text


    Patchwork: https://patchwork.freedesktop.org/patch/516121/'
- lang: es
  value: "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: drm/msm/dp:\
    \ no complete dp_aux_cmd_fifo_tx() si irq no es para transferencia auxiliar. Hay\
    \ 3 posibles fuentes de interrupci\xF3n que son manejadas por el controlador DP,\
    \ HPDstatus, los cambios de estado del controlador y Aux. transacci\xF3n de lectura/escritura.\
    \ En cada irq, el controlador DP debe verificar el estado isr de cada fuente de\
    \ interrupci\xF3n y atender la interrupci\xF3n si sus bits de estado isr muestran\
    \ que hay interrupciones pendientes. Existe una posible condici\xF3n de ejecuci\xF3\
    n que puede ocurrir en la implementaci\xF3n actual del controlador aux isr, ya\
    \ que siempre est\xE1 completo dp_aux_cmd_fifo_tx(), incluso irq no es para transacciones\
    \ de lectura o escritura auxiliar. Esto puede causar que la transacci\xF3n de\
    \ lectura auxiliar regrese prematuramente si la lectura de datos auxiliares del\
    \ host est\xE1 en medio de la espera de que el receptor complete la transferencia\
    \ de datos al host mientras ocurre la irq. Esto har\xE1 que el b\xFAfer de recepci\xF3\
    n del host contenga datos inesperados. Este parche soluciona este problema verificando\
    \ aux isr y regresa inmediatamente al controlador aux isr si no hay ning\xFAn\
    \ bit de estado isr establecido. Actualmente hay un informe de error que indica\
    \ que la corrupci\xF3n de eDP edid ocurre durante el inicio del sistema. Despu\xE9\
    s de una larga depuraci\xF3n, descubr\xED que la interrupci\xF3n VIDEO_READY se\
    \ activaba continuamente durante el inicio del sistema, lo que provocaba que dp_aux_isr()\
    \ completara dp_aux_cmd_fifo_tx() prematuramente para recuperar datos del b\xFA\
    fer de hardware auxiliar que a\xFAn no contiene la transferencia completa de datos\
    \ desde el receptor. Esto provoc\xF3 corrupci\xF3n. A continuaci\xF3n se muestra\
    \ la firma en los registros del kernel cuando ocurre un problema, EDID tiene el\
    \ panel de encabezado corrupto-simple-dp-aux aux-aea0000.edp: No se pudo identificar\
    \ el panel a trav\xE9s de EDID Cambios en v2: - complete si (ret == IRQ_HANDLED)\
    \ ay dp-aux_isr() - agregar m\xE1s texto de confirmaci\xF3n Cambios en v3: - agregar\
    \ Stephen sugerido - dp_aux_isr() devolver IRQ_XXX a la persona que llama - dp_ctrl_isr()\
    \ devolver IRQ_XXX a la persona que llama Cambios en v4: - dividir en dos parches\
    \ Cambios en v5: - eliminar l\xEDnea vac\xEDa entre etiquetas Cambios en v6: -\
    \ eliminar \"eso\" adicional y l\xEDnea fija de m\xE1s de 75 caracteres en el\
    \ texto de confirmaci\xF3n Patchwork: https://patchwork.freedesktop.org/patch/516121/"
id: CVE-2022-48898
lastModified: '2024-08-21T12:30:33.697'
metrics: {}
published: '2024-08-21T07:15:05.750'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/1cba0d150fa102439114a91b3e215909efc9f169
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/785607e5e6fb52caf141e4580de40405565f04f1
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/984ad875db804948c86ca9e1c2e784ae8252715a
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/b7dcbca46db3c77fdb02c2a9d6239e5aa3b06a59
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Undergoing Analysis
