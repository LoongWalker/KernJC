descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    parisc: Fix random data corruption from exception handler


    The current exception handler implementation, which assists when accessing

    user space memory, may exhibit random data corruption if the compiler decides

    to use a different register than the specified register %r29 (defined in

    ASM_EXCEPTIONTABLE_REG) for the error code. If the compiler choose another

    register, the fault handler will nevertheless store -EFAULT into %r29 and thus

    trash whatever this register is used for.

    Looking at the assembly I found that this happens sometimes in emulate_ldd().


    To solve the issue, the easiest solution would be if it somehow is

    possible to tell the fault handler which register is used to hold the error

    code. Using %0 or %1 in the inline assembly is not posssible as it will show

    up as e.g. %r29 (with the "%r" prefix), which the GNU assembler can not

    convert to an integer.


    This patch takes another, better and more flexible approach:

    We extend the __ex_table (which is out of the execution path) by one 32-word.

    In this word we tell the compiler to insert the assembler instruction

    "or %r0,%r0,%reg", where %reg references the register which the compiler

    choosed for the error return code.

    In case of an access failure, the fault handler finds the __ex_table entry and

    can examine the opcode. The used register is encoded in the lowest 5 bits, and

    the fault handler can then store -EFAULT into this register.


    Since we extend the __ex_table to 3 words we can''t use the BUILDTIME_TABLE_SORT

    config option any longer.'
- lang: es
  value: "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: parisc:\
    \ corrige la corrupci\xF3n aleatoria de datos del controlador de excepciones La\
    \ implementaci\xF3n actual del controlador de excepciones, que ayuda al acceder\
    \ a la memoria del espacio del usuario, puede exhibir corrupci\xF3n aleatoria\
    \ de datos si el compilador decide usar un registro diferente al el registro especificado\
    \ %r29 (definido en ASM_EXCEPTIONTABLE_REG) para el c\xF3digo de error. Si el\
    \ compilador elige otro registro, el manejador de fallas almacenar\xE1 -EFAULT\
    \ en %r29 y, por lo tanto, eliminar\xE1 cualquier cosa para la que se utilice\
    \ este registro. Al observar el ensamblaje, encontr\xE9 que esto sucede a veces\
    \ en emulate_ldd(). Para resolver el problema, la soluci\xF3n m\xE1s sencilla\
    \ ser\xEDa si de alguna manera fuera posible decirle al manejador de fallas qu\xE9\
    \ registro se utiliza para contener el c\xF3digo de error. No es posible usar\
    \ %0 o %1 en el ensamblador en l\xEDnea ya que aparecer\xE1, por ejemplo, como\
    \ %r29 (con el prefijo \"%r\"), que el ensamblador GNU no puede convertir a un\
    \ n\xFAmero entero. Este parche adopta otro enfoque mejor y m\xE1s flexible: ampliamos\
    \ el __ex_table (que est\xE1 fuera de la ruta de ejecuci\xF3n) en 32 palabras.\
    \ En esta palabra le decimos al compilador que inserte la instrucci\xF3n ensambladora\
    \ \"o %r0,%r0,%reg\", donde %reg hace referencia al registro que el compilador\
    \ eligi\xF3 para el c\xF3digo de retorno de error. En caso de un error de acceso,\
    \ el controlador de fallas encuentra la entrada __ex_table y puede examinar el\
    \ c\xF3digo de operaci\xF3n. El registro utilizado est\xE1 codificado en los 5\
    \ bits m\xE1s bajos y el manejador de fallas puede almacenar -EFAULT en este registro.\
    \ Dado que ampliamos __ex_table a 3 palabras, ya no podemos usar la opci\xF3n\
    \ de configuraci\xF3n BUILDTIME_TABLE_SORT."
id: CVE-2024-26706
lastModified: '2024-04-03T17:24:18.150'
metrics: {}
published: '2024-04-03T15:15:53.293'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/23027309b099ffc4efca5477009a11dccbdae592
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/8b1d72395635af45410b66cc4c4ab37a12c4a831
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/ce31d79aa1f13a2345791f84935281a2c194e003
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/fa69a8063f8b27f3c7434a0d4f464a76a62f24d2
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
