descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    LoongArch: Define the __io_aw() hook as mmiowb()


    Commit fb24ea52f78e0d595852e ("drivers: Remove explicit invocations of

    mmiowb()") remove all mmiowb() in drivers, but it says:


    "NOTE: mmiowb() has only ever guaranteed ordering in conjunction with

    spin_unlock(). However, pairing each mmiowb() removal in this patch with

    the corresponding call to spin_unlock() is not at all trivial, so there

    is a small chance that this change may regress any drivers incorrectly

    relying on mmiowb() to order MMIO writes between CPUs using lock-free

    synchronisation."


    The mmio in radeon_ring_commit() is protected by a mutex rather than a

    spinlock, but in the mutex fastpath it behaves similar to spinlock. We

    can add mmiowb() calls in the radeon driver but the maintainer says he

    doesn''t like such a workaround, and radeon is not the only example of

    mutex protected mmio.


    So we should extend the mmiowb tracking system from spinlock to mutex,

    and maybe other locking primitives. This is not easy and error prone, so

    we solve it in the architectural code, by simply defining the __io_aw()

    hook as mmiowb(). And we no longer need to override queued_spin_unlock()

    so use the generic definition.


    Without this, we get such an error when run ''glxgears'' on weak ordering

    architectures such as LoongArch:


    radeon 0000:04:00.0: ring 0 stalled for more than 10324msec

    radeon 0000:04:00.0: ring 3 stalled for more than 10240msec

    radeon 0000:04:00.0: GPU lockup (current fence id 0x000000000001f412 last fence
    id 0x000000000001f414 on ring 3)

    radeon 0000:04:00.0: GPU lockup (current fence id 0x000000000000f940 last fence
    id 0x000000000000f941 on ring 0)

    radeon 0000:04:00.0: scheduling IB failed (-35).

    [drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn''t update BO_VA (-35)

    radeon 0000:04:00.0: scheduling IB failed (-35).

    [drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn''t update BO_VA (-35)

    radeon 0000:04:00.0: scheduling IB failed (-35).

    [drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn''t update BO_VA (-35)

    radeon 0000:04:00.0: scheduling IB failed (-35).

    [drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn''t update BO_VA (-35)

    radeon 0000:04:00.0: scheduling IB failed (-35).

    [drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn''t update BO_VA (-35)

    radeon 0000:04:00.0: scheduling IB failed (-35).

    [drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn''t update BO_VA (-35)

    radeon 0000:04:00.0: scheduling IB failed (-35).

    [drm:radeon_gem_va_ioctl [radeon]] *ERROR* Couldn''t update BO_VA (-35)'
- lang: es
  value: "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: LoongArch:\
    \ define el gancho __io_aw() como mmiowb(). Confirmaci\xF3n fb24ea52f78e0d595852e\
    \ (\"drivers: elimina las invocaciones expl\xEDcitas de mmiowb()\") elimina todos\
    \ los mmiowb() en los controladores, pero dice : \"NOTA: mmiowb() solo ha garantizado\
    \ el pedido junto con spin_unlock(). Sin embargo, emparejar cada eliminaci\xF3\
    n de mmiowb() en este parche con la llamada correspondiente a spin_unlock() no\
    \ es nada trivial, por lo que existe una peque\xF1a posibilidad que este cambio\
    \ puede hacer retroceder cualquier controlador que dependa incorrectamente de\
    \ mmiowb() para ordenar escrituras MMIO entre CPU usando sincronizaci\xF3n sin\
    \ bloqueo\". El mmio en radeon_ring_commit() est\xE1 protegido por un mutex en\
    \ lugar de un spinlock, pero en el mutex fastpath se comporta de manera similar\
    \ al spinlock. Podemos agregar llamadas mmiowb() en el controlador radeon, pero\
    \ el mantenedor dice que no le gusta esa soluci\xF3n, y radeon no es el \xFAnico\
    \ ejemplo de mmio protegido por mutex. Entonces deber\xEDamos extender el sistema\
    \ de seguimiento mmiowb de spinlock a mutex, y tal vez a otras primitivas de bloqueo.\
    \ Esto no es f\xE1cil y propenso a errores, por lo que lo solucionamos en el c\xF3\
    digo arquitect\xF3nico, simplemente definiendo el gancho __io_aw() como mmiowb().\
    \ Y ya no necesitamos anular queued_spin_unlock() as\xED que use la definici\xF3\
    n gen\xE9rica. Sin esto, obtenemos este error cuando ejecutamos 'glxgears' en\
    \ arquitecturas de ordenamiento d\xE9biles como LoongArch: radeon 0000:04:00.0:\
    \ el anillo 0 se detuvo durante m\xE1s de 10324 mseg radeon 0000:04:00.0: el anillo\
    \ 3 se detuvo durante m\xE1s de 10240 mseg radeon 0000:04:00.0: bloqueo de GPU\
    \ (ID de valla actual 0x000000000001f412 ID de \xFAltima valla 0x000000000001f414\
    \ en el anillo 3) radeon 0000:04:00.0: Bloqueo de GPU (ID de valla actual 0x000000000000f940\
    \ ID de \xFAltima valla 0x000 000000000f941 en el anillo 0) radeon 0000:04:00.0:\
    \ la programaci\xF3n IB fall\xF3 (-35). [drm:radeon_gem_va_ioctl [radeon]] *ERROR*\
    \ No se pudo actualizar BO_VA (-35) radeon 0000:04:00.0: fall\xF3 la programaci\xF3\
    n de IB (-35). [drm:radeon_gem_va_ioctl [radeon]] *ERROR* No se pudo actualizar\
    \ BO_VA (-35) radeon 0000:04:00.0: fall\xF3 la programaci\xF3n de IB (-35). [drm:radeon_gem_va_ioctl\
    \ [radeon]] *ERROR* No se pudo actualizar BO_VA (-35) radeon 0000:04:00.0: fall\xF3\
    \ la programaci\xF3n de IB (-35). [drm:radeon_gem_va_ioctl [radeon]] *ERROR* No\
    \ se pudo actualizar BO_VA (-35) radeon 0000:04:00.0: fall\xF3 la programaci\xF3\
    n de IB (-35). [drm:radeon_gem_va_ioctl [radeon]] *ERROR* No se pudo actualizar\
    \ BO_VA (-35) radeon 0000:04:00.0: fall\xF3 la programaci\xF3n de IB (-35). [drm:radeon_gem_va_ioctl\
    \ [radeon]] *ERROR* No se pudo actualizar BO_VA (-35) radeon 0000:04:00.0: fall\xF3\
    \ la programaci\xF3n de IB (-35). [drm:radeon_gem_va_ioctl [radeon]] *ERROR* No\
    \ se pudo actualizar BO_VA (-35)"
id: CVE-2024-35818
lastModified: '2024-05-17T18:35:35.070'
metrics: {}
published: '2024-05-17T14:15:16.710'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/0b61a7dc6712b78799b3949997e8a5e94db5c4b0
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/97cd43ba824aec764f5ea2790d0c0a318f885167
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/9adec248bba33b1503252caf8e59d81febfc5ceb
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/9c68ece8b2a5c5ff9b2fcaea923dd73efeb174cd
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/d7d7c6cdea875be3b241d7d39873bb431db7154d
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
