cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    block: fix request.queuelist usage in flush


    Friedrich Weber reported a kernel crash problem and bisected to commit

    81ada09cc25e ("blk-flush: reuse rq queuelist in flush state machine").


    The root cause is that we use "list_move_tail(&rq->queuelist, pending)"

    in the PREFLUSH/POSTFLUSH sequences. But rq->queuelist.next == xxx since

    it''s popped out from plug->cached_rq in __blk_mq_alloc_requests_batch().

    We don''t initialize its queuelist just for this first request, although

    the queuelist of all later popped requests will be initialized.


    Fix it by changing to use "list_add_tail(&rq->queuelist, pending)" so

    rq->queuelist doesn''t need to be initialized. It should be ok since rq

    can''t be on any list when PREFLUSH or POSTFLUSH, has no move actually.


    Please note the commit 81ada09cc25e ("blk-flush: reuse rq queuelist in

    flush state machine") also has another requirement that no drivers would

    touch rq->queuelist after blk_mq_end_request() since we will reuse it to

    add rq to the post-flush pending list in POSTFLUSH. If this is not true,

    we will have to revert that commit IMHO.


    This updated version adds "list_del_init(&rq->queuelist)" in flush rq

    callback since the dm layer may submit request of a weird invalid format

    (REQ_FSEQ_PREFLUSH | REQ_FSEQ_POSTFLUSH), which causes double list_add

    if without this "list_del_init(&rq->queuelist)". The weird invalid format

    problem should be fixed in dm layer.'
- lang: es
  value: "En el kernel de Linux, se resolvi\xF3 la siguiente vulnerabilidad: bloque:\
    \ corrige el uso de request.queuelist en Flush Friedrich Weber inform\xF3 un problema\
    \ de falla del kernel y lo bisec\xF3 para el commit 81ada09cc25e (\"blk-flush:\
    \ reutilizar rq queuelist en la m\xE1quina de estado de descarga\"). La causa\
    \ principal es que usamos \"list_move_tail(&amp;rq-&gt;queuelist, pendiente)\"\
    \ en las secuencias PREFLUSH/POSTFLUSH. Pero rq-&gt;queuelist.next == xxx ya que\
    \ sali\xF3 del plug-&gt;cached_rq en __blk_mq_alloc_requests_batch(). No inicializamos\
    \ su lista de colas solo para esta primera solicitud, aunque se inicializar\xE1\
    \ la lista de colas de todas las solicitudes emergentes posteriores. Solucionelo\
    \ cambiando para usar \"list_add_tail(&amp;rq-&gt;queuelist, pendiente)\" para\
    \ que no sea necesario inicializar rq-&gt;queuelist. Deber\xEDa estar bien ya\
    \ que rq no puede estar en ninguna lista cuando PREFLUSH o POSTFLUSH, en realidad\
    \ no tiene movimiento. Tenga en cuenta que el commit 81ada09cc25e (\"blk-flush:\
    \ reutilizar rq queuelist en la m\xE1quina de estado de descarga\") tambi\xE9\
    n tiene otro requisito de que ning\xFAn controlador toque rq-&gt;queuelist despu\xE9\
    s de blk_mq_end_request() ya que lo reutilizaremos para agregar rq al post-flush\
    \ lista pendiente en POSTFLUSH. Si esto no es cierto, tendremos que revertir ese\
    \ commit en mi humilde opini\xF3n. Esta versi\xF3n actualizada agrega \"list_del_init(&amp;rq-&gt;queuelist)\"\
    \ en la devoluci\xF3n de llamada de Flush rq ya que la capa dm puede enviar una\
    \ solicitud de un formato extra\xF1o no v\xE1lido (REQ_FSEQ_PREFLUSH | REQ_FSEQ_POSTFLUSH),\
    \ lo que provoca el doble list_add si no se tiene este \"list_del_init(&amp;rq-&gt;queuelist)\
    \ \". El extra\xF1o problema del formato no v\xE1lido deber\xEDa solucionarse\
    \ en la capa dm."
id: CVE-2024-40925
lastModified: '2024-07-12T16:34:58.687'
metrics: {}
published: '2024-07-12T13:15:15.343'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/87907bd69721a8506618a954d41a1de3040e88aa
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/d0321c812d89c5910d8da8e4b10c891c6b96ff70
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/fe1e395563ccb051e9dbd8fa99859f5caaad2e71
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
