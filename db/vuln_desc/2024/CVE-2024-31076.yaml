cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    genirq/cpuhotplug, x86/vector: Prevent vector leak during CPU offline


    The absence of IRQD_MOVE_PCNTXT prevents immediate effectiveness of

    interrupt affinity reconfiguration via procfs. Instead, the change is

    deferred until the next instance of the interrupt being triggered on the

    original CPU.


    When the interrupt next triggers on the original CPU, the new affinity is

    enforced within __irq_move_irq(). A vector is allocated from the new CPU,

    but the old vector on the original CPU remains and is not immediately

    reclaimed. Instead, apicd->move_in_progress is flagged, and the reclaiming

    process is delayed until the next trigger of the interrupt on the new CPU.


    Upon the subsequent triggering of the interrupt on the new CPU,

    irq_complete_move() adds a task to the old CPU''s vector_cleanup list if it

    remains online. Subsequently, the timer on the old CPU iterates over its

    vector_cleanup list, reclaiming old vectors.


    However, a rare scenario arises if the old CPU is outgoing before the

    interrupt triggers again on the new CPU.


    In that case irq_force_complete_move() is not invoked on the outgoing CPU

    to reclaim the old apicd->prev_vector because the interrupt isn''t currently

    affine to the outgoing CPU, and irq_needs_fixup() returns false. Even

    though __vector_schedule_cleanup() is later called on the new CPU, it

    doesn''t reclaim apicd->prev_vector; instead, it simply resets both

    apicd->move_in_progress and apicd->prev_vector to 0.


    As a result, the vector remains unreclaimed in vector_matrix, leading to a

    CPU vector leak.


    To address this issue, move the invocation of irq_force_complete_move()

    before the irq_needs_fixup() call to reclaim apicd->prev_vector, if the

    interrupt is currently or used to be affine to the outgoing CPU.


    Additionally, reclaim the vector in __vector_schedule_cleanup() as well,

    following a warning message, although theoretically it should never see

    apicd->move_in_progress with apicd->prev_cpu pointing to an offline CPU.'
- lang: es
  value: "En el kernel de Linux, se resolvi\xF3 la siguiente vulnerabilidad: genirq/cpuhotplug,\
    \ x86/vector: evita la fuga de vectores durante la CPU fuera de l\xEDnea. La ausencia\
    \ de IRQD_MOVE_PCNTXT impide la efectividad inmediata de la reconfiguraci\xF3\
    n de la afinidad de interrupci\xF3n a trav\xE9s de procfs. En cambio, el cambio\
    \ se difiere hasta la siguiente instancia de interrupci\xF3n que se activa en\
    \ la CPU original. La siguiente vez que se activa la interrupci\xF3n en la CPU\
    \ original, la nueva afinidad se aplica dentro de __irq_move_irq(). Se asigna\
    \ un vector desde la nueva CPU, pero el vector antiguo en la CPU original permanece\
    \ y no se recupera inmediatamente. En su lugar, se marca apicd-&gt;move_in_progress\
    \ y el proceso de recuperaci\xF3n se retrasa hasta el siguiente desencadenante\
    \ de la interrupci\xF3n en la nueva CPU. Tras la activaci\xF3n posterior de la\
    \ interrupci\xF3n en la nueva CPU, irq_complete_move() agrega una tarea a la lista\
    \ vector_cleanup de la CPU anterior si permanece en l\xEDnea. Posteriormente,\
    \ el temporizador de la CPU antigua itera sobre su lista vector_cleanup, recuperando\
    \ vectores antiguos. Sin embargo, surge un escenario poco com\xFAn si la CPU antigua\
    \ sale antes de que la interrupci\xF3n se active nuevamente en la nueva CPU. En\
    \ ese caso, irq_force_complete_move() no se invoca en la CPU saliente para recuperar\
    \ el antiguo apicd-&gt;prev_vector porque la interrupci\xF3n no es actualmente\
    \ af\xEDn a la CPU saliente, e irq_needs_fixup() devuelve false. Aunque m\xE1\
    s tarde se llama a __vector_schedule_cleanup() en la nueva CPU, no reclama apicd-&gt;prev_vector;\
    \ en su lugar, simplemente restablece apicd-&gt;move_in_progress y apicd-&gt;prev_vector\
    \ a 0. Como resultado, el vector permanece sin reclamar en vector_matrix, lo que\
    \ provoca una fuga de vector de CPU. Para solucionar este problema, mueva la invocaci\xF3\
    n de irq_force_complete_move() antes de la llamada irq_needs_fixup() para recuperar\
    \ apicd-&gt;prev_vector, si la interrupci\xF3n es actualmente o sol\xEDa ser af\xED\
    n a la CPU saliente. Adem\xE1s, recupere tambi\xE9n el vector en __vector_schedule_cleanup(),\
    \ despu\xE9s de un mensaje de advertencia, aunque en teor\xEDa nunca deber\xED\
    a ver apicd-&gt;move_in_progress con apicd-&gt;prev_cpu apuntando a una CPU fuera\
    \ de l\xEDnea."
id: CVE-2024-31076
lastModified: '2024-07-15T07:15:03.810'
metrics: {}
published: '2024-06-21T11:15:09.673'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/59f86a2908380d09cdc726461c0fbb8d8579c99f
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/6752dfcfff3ac3e16625ebd3f0ad9630900e7e76
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/9eeda3e0071a329af1eba15f4e57dc39576bb420
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/a40209d355afe4ed6d533507838c9e5cd70a76d8
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/a6c11c0a5235fb144a65e0cb2ffd360ddc1f6c32
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/e9c96d01d520498b169ce734a8ad1142bef86a30
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/ebfb16fc057a016abb46a9720a54abf0d4f6abe1
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/f5f4675960609d8c5ee95f027fbf6ce380f98372
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
