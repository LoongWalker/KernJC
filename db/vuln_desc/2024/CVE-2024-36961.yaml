cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    thermal/debugfs: Fix two locking issues with thermal zone debug


    With the current thermal zone locking arrangement in the debugfs code,

    user space can open the "mitigations" file for a thermal zone before

    the zone''s debugfs pointer is set which will result in a NULL pointer

    dereference in tze_seq_start().


    Moreover, thermal_debug_tz_remove() is not called under the thermal

    zone lock, so it can run in parallel with the other functions accessing

    the thermal zone''s struct thermal_debugfs object.  Then, it may clear

    tz->debugfs after one of those functions has checked it and the

    struct thermal_debugfs object may be freed prematurely.


    To address the first problem, pass a pointer to the thermal zone''s

    struct thermal_debugfs object to debugfs_create_file() in

    thermal_debug_tz_add() and make tze_seq_start(), tze_seq_next(),

    tze_seq_stop(), and tze_seq_show() retrieve it from s->private

    instead of a pointer to the thermal zone object.  This will ensure

    that tz_debugfs will be valid across the "mitigations" file accesses

    until thermal_debugfs_remove_id() called by thermal_debug_tz_remove()

    removes that file.


    To address the second problem, use tz->lock in thermal_debug_tz_remove()

    around the tz->debugfs value check (in case the same thermal zone is

    removed at the same time in two different threads) and its reset to NULL.


    Cc :6.8+ <stable@vger.kernel.org> # 6.8+'
- lang: es
  value: "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: Thermal/debugfs:\
    \ soluciona dos problemas de bloqueo con la depuraci\xF3n de la zona t\xE9rmica.\
    \ Con la disposici\xF3n actual de bloqueo de la zona t\xE9rmica en el c\xF3digo\
    \ debugfs, el espacio de usuario puede abrir el archivo de \"mitigaciones\" para\
    \ una zona t\xE9rmica antes. El puntero debugfs de la zona est\xE1 configurado,\
    \ lo que dar\xE1 como resultado una desreferencia del puntero NULL en tze_seq_start().\
    \ Adem\xE1s, Thermal_debug_tz_remove() no se llama bajo el bloqueo de la zona\
    \ t\xE9rmica, por lo que puede ejecutarse en paralelo con las otras funciones\
    \ que acceden al objeto struct Thermal_debugfs de la zona t\xE9rmica. Luego, puede\
    \ borrar tz-&gt;debugfs despu\xE9s de que una de esas funciones lo haya verificado\
    \ y el objeto struct Thermal_debugfs puede liberarse prematuramente. Para solucionar\
    \ el primer problema, pase un puntero al objeto struct Thermal_debugfs de la zona\
    \ t\xE9rmica para debugfs_create_file() en Thermal_debug_tz_add() y haga que tze_seq_start(),\
    \ tze_seq_next(), tze_seq_stop() y tze_seq_show() lo recuperen de s-&gt;private.\
    \ de un puntero al objeto de la zona t\xE9rmica. Esto garantizar\xE1 que tz_debugfs\
    \ sea v\xE1lido en todos los accesos a archivos de \"mitigaciones\" hasta que\
    \ Thermal_debugfs_remove_id() llamado por Thermal_debug_tz_remove() elimine ese\
    \ archivo. Para solucionar el segundo problema, use tz-&gt;lock en Thermal_debug_tz_remove()\
    \ alrededor de la verificaci\xF3n del valor de tz-&gt;debugfs (en caso de que\
    \ la misma zona t\xE9rmica se elimine al mismo tiempo en dos subprocesos diferentes)\
    \ y se restablezca a NULL. CC :6.8+  # 6.8+"
id: CVE-2024-36961
lastModified: '2024-06-03T14:46:24.250'
metrics: {}
published: '2024-06-03T08:15:09.660'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/6c57bdd0505422d5ccd2df541d993aec978c842e
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/c7f7c37271787a7f77d7eedc132b0b419a76b4c8
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
