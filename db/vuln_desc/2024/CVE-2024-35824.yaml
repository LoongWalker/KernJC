cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    misc: lis3lv02d_i2c: Fix regulators getting en-/dis-abled twice on suspend/resume


    When not configured for wakeup lis3lv02d_i2c_suspend() will call

    lis3lv02d_poweroff() even if the device has already been turned off

    by the runtime-suspend handler and if configured for wakeup and

    the device is runtime-suspended at this point then it is not turned

    back on to serve as a wakeup source.


    Before commit b1b9f7a49440 ("misc: lis3lv02d_i2c: Add missing setting

    of the reg_ctrl callback"), lis3lv02d_poweroff() failed to disable

    the regulators which as a side effect made calling poweroff() twice ok.


    Now that poweroff() correctly disables the regulators, doing this twice

    triggers a WARN() in the regulator core:


    unbalanced disables for regulator-dummy

    WARNING: CPU: 1 PID: 92 at drivers/regulator/core.c:2999 _regulator_disable

    ...


    Fix lis3lv02d_i2c_suspend() to not call poweroff() a second time if

    already runtime-suspended and add a poweron() call when necessary to

    make wakeup work.


    lis3lv02d_i2c_resume() has similar issues, with an added weirness that

    it always powers on the device if it is runtime suspended, after which

    the first runtime-resume will call poweron() again, causing the enabled

    count for the regulator to increase by 1 every suspend/resume. These

    unbalanced regulator_enable() calls cause the regulator to never

    be turned off and trigger the following WARN() on driver unbind:


    WARNING: CPU: 1 PID: 1724 at drivers/regulator/core.c:2396 _regulator_put


    Fix this by making lis3lv02d_i2c_resume() mirror the new suspend().'
- lang: es
  value: "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: misc:\
    \ lis3lv02d_i2c: corrige que los reguladores se activen/desactiven dos veces al\
    \ suspender/reanudar Cuando no est\xE1 configurado para reactivaci\xF3n, lis3lv02d_i2c_suspend()\
    \ llamar\xE1 a lis3lv02d_poweroff() incluso si el dispositivo ya ha sido desactivado\
    \ por el controlador de suspensi\xF3n de tiempo de ejecuci\xF3n y si est\xE1 configurado\
    \ para reactivaci\xF3n y el dispositivo est\xE1 suspendido en tiempo de ejecuci\xF3\
    n en este punto, no se vuelve a activar para que sirva como fuente de activaci\xF3\
    n. Antes de la confirmaci\xF3n b1b9f7a49440 (\"misc: lis3lv02d_i2c: Agregar configuraci\xF3\
    n faltante de la devoluci\xF3n de llamada reg_ctrl\"), lis3lv02d_poweroff() fallaba\
    \ al deshabilitar los reguladores, lo que como efecto secundario hizo que llamar\
    \ a poweroff() dos veces fuera correcto. Ahora que poweroff() desactiva correctamente\
    \ los reguladores, al hacer esto dos veces se activa una ADVERTENCIA() en el n\xFA\
    cleo del regulador: desactivaciones desequilibradas para regulador ficticio ADVERTENCIA:\
    \ CPU: 1 PID: 92 en drivers/regulator/core.c:2999 _regulator_disable .. Corrija\
    \ lis3lv02d_i2c_suspend() para que no llame a poweroff() una segunda vez si ya\
    \ est\xE1 suspendido el tiempo de ejecuci\xF3n y agregue una llamada a poweron()\
    \ cuando sea necesario para que la reactivaci\xF3n funcione. lis3lv02d_i2c_resume()\
    \ tiene problemas similares, con el inconveniente adicional de que siempre enciende\
    \ el dispositivo si el tiempo de ejecuci\xF3n est\xE1 suspendido, despu\xE9s de\
    \ lo cual la primera reanudaci\xF3n del tiempo de ejecuci\xF3n llamar\xE1 a poweron()\
    \ nuevamente, lo que provocar\xE1 que el recuento habilitado para el regulador\
    \ aumente en 1 cada suspender/reanudar. Estas llamadas desequilibradas regulator_enable()\
    \ hacen que el regulador nunca se apague y activan la siguiente ADVERTENCIA()\
    \ al desvincular el controlador: ADVERTENCIA: CPU: 1 PID: 1724 en drivers/regulator/core.c:2396\
    \ _regulator_put Solucione esto haciendo lis3lv02d_i2c_resume( ) refleja la nueva\
    \ suspensi\xF3n()."
id: CVE-2024-35824
lastModified: '2024-05-17T18:35:35.070'
metrics: {}
published: '2024-05-17T14:15:18.033'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/4154e767354140db7804207117e7238fb337b0e7
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/997ca415384612c8df76d99d9a768e0b3f42b325
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/ac3e0384073b2408d6cb0d972fee9fcc3776053d
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/f6df761182fc953907b18aba5049fc2a044ecb45
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
