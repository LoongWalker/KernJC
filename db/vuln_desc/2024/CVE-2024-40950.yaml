cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    mm: huge_memory: fix misused mapping_large_folio_support() for anon folios


    When I did a large folios split test, a WARNING "[ 5059.122759][ T166]

    Cannot split file folio to non-0 order" was triggered.  But the test cases

    are only for anonmous folios.  while mapping_large_folio_support() is only

    reasonable for page cache folios.


    In split_huge_page_to_list_to_order(), the folio passed to

    mapping_large_folio_support() maybe anonmous folio.  The folio_test_anon()

    check is missing.  So the split of the anonmous THP is failed.  This is

    also the same for shmem_mapping().  We''d better add a check for both.  But

    the shmem_mapping() in __split_huge_page() is not involved, as for

    anonmous folios, the end parameter is set to -1, so (head[i].index >= end)

    is always false.  shmem_mapping() is not called.


    Also add a VM_WARN_ON_ONCE() in mapping_large_folio_support() for anon

    mapping, So we can detect the wrong use more easily.


    THP folios maybe exist in the pagecache even the file system doesn''t

    support large folio, it is because when CONFIG_TRANSPARENT_HUGEPAGE is

    enabled, khugepaged will try to collapse read-only file-backed pages to

    THP.  But the mapping does not actually support multi order large folios

    properly.


    Using /sys/kernel/debug/split_huge_pages to verify this, with this patch,

    large anon THP is successfully split and the warning is ceased.'
- lang: es
  value: "En el kernel de Linux, se resolvi\xF3 la siguiente vulnerabilidad: mm: enorme_memoria:\
    \ corrige el mapeo_grande_folio_support() mal utilizado para publicaciones an\xF3\
    nimas Cuando hice una prueba de divisi\xF3n de publicaciones grandes, apareci\xF3\
    \ una ADVERTENCIA \"[ 5059.122759][ T166] No se puede dividir la publicaci\xF3\
    n del archivo en un valor distinto de 0 \"orden\" se activ\xF3. Pero los casos\
    \ de prueba son s\xF3lo para folios an\xF3nimos. mientras que mapping_large_folio_support()\
    \ solo es razonable para las publicaciones de cach\xE9 de p\xE1ginas. En split_huge_page_to_list_to_order(),\
    \ la publicaci\xF3n pas\xF3 a mapping_large_folio_support(), tal vez una publicaci\xF3\
    n an\xF3nima. Falta la verificaci\xF3n folio_test_anon(). As\xED que la divisi\xF3\
    n del THP an\xF3nimo fracas\xF3. Esto tambi\xE9n es lo mismo para shmem_mapping().\
    \ Ser\xE1 mejor que agreguemos un cheque para ambos. Pero shmem_mapping() en __split_huge_page()\
    \ no est\xE1 involucrado, ya que para las publicaciones an\xF3nimas, el par\xE1\
    metro final se establece en -1, por lo que (head[i].index &gt;= end) siempre es\
    \ falso. shmem_mapping() no se llama. Tambi\xE9n agregue un VM_WARN_ON_ONCE()\
    \ en mapping_large_folio_support() para un mapeo an\xF3nimo, para que podamos\
    \ detectar el uso incorrecto m\xE1s f\xE1cilmente. Es posible que existan publicaciones\
    \ de THP en el cach\xE9 de p\xE1ginas, incluso si el sistema de archivos no admite\
    \ publicaciones grandes, esto se debe a que cuando CONFIG_TRANSPARENT_HUGEPAGE\
    \ est\xE1 habilitado, khugepaged intentar\xE1 colapsar las p\xE1ginas respaldadas\
    \ por archivos de solo lectura en THP. Pero el mapeo en realidad no admite correctamente\
    \ folios grandes de varios pedidos. Usando /sys/kernel/debug/split_huge_pages\
    \ para verificar esto, con este parche, un THP an\xF3nimo grande se divide con\
    \ \xE9xito y la advertencia cesa."
id: CVE-2024-40950
lastModified: '2024-07-12T16:34:58.687'
metrics: {}
published: '2024-07-12T13:15:17.353'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/5df493a99fcf887133cf01d23cd4bebb6d385d3c
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/6a50c9b512f7734bc356f4bd47885a6f7c98491a
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
