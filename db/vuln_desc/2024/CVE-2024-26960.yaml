descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    mm: swap: fix race between free_swap_and_cache() and swapoff()


    There was previously a theoretical window where swapoff() could run and

    teardown a swap_info_struct while a call to free_swap_and_cache() was

    running in another thread.  This could cause, amongst other bad

    possibilities, swap_page_trans_huge_swapped() (called by

    free_swap_and_cache()) to access the freed memory for swap_map.


    This is a theoretical problem and I haven''t been able to provoke it from a

    test case.  But there has been agreement based on code review that this is

    possible (see link below).


    Fix it by using get_swap_device()/put_swap_device(), which will stall

    swapoff().  There was an extra check in _swap_info_get() to confirm that

    the swap entry was not free.  This isn''t present in get_swap_device()

    because it doesn''t make sense in general due to the race between getting

    the reference and swapoff.  So I''ve added an equivalent check directly in

    free_swap_and_cache().


    Details of how to provoke one possible issue (thanks to David Hildenbrand

    for deriving this):


    --8<-----


    __swap_entry_free() might be the last user and result in

    "count == SWAP_HAS_CACHE".


    swapoff->try_to_unuse() will stop as soon as soon as si->inuse_pages==0.


    So the question is: could someone reclaim the folio and turn

    si->inuse_pages==0, before we completed swap_page_trans_huge_swapped().


    Imagine the following: 2 MiB folio in the swapcache. Only 2 subpages are

    still references by swap entries.


    Process 1 still references subpage 0 via swap entry.

    Process 2 still references subpage 1 via swap entry.


    Process 1 quits. Calls free_swap_and_cache().

    -> count == SWAP_HAS_CACHE

    [then, preempted in the hypervisor etc.]


    Process 2 quits. Calls free_swap_and_cache().

    -> count == SWAP_HAS_CACHE


    Process 2 goes ahead, passes swap_page_trans_huge_swapped(), and calls

    __try_to_reclaim_swap().


    __try_to_reclaim_swap()->folio_free_swap()->delete_from_swap_cache()->

    put_swap_folio()->free_swap_slot()->swapcache_free_entries()->

    swap_entry_free()->swap_range_free()->

    ...

    WRITE_ONCE(si->inuse_pages, si->inuse_pages - nr_entries);


    What stops swapoff to succeed after process 2 reclaimed the swap cache

    but before process1 finished its call to swap_page_trans_huge_swapped()?


    --8<-----'
- lang: es
  value: "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: mm: swap:\
    \ corrige la ejecuci\xF3n entre free_swap_and_cache() y swapoff() Anteriormente\
    \ exist\xEDa una ventana te\xF3rica donde swapoff() pod\xEDa ejecutar y desmantelar\
    \ un swap_info_struct mientras se realizaba una llamada a free_swap_and_cache().\
    \ corriendo en otro hilo. Esto podr\xEDa causar, entre otras malas posibilidades,\
    \ que swap_page_trans_huge_swapped() (llamado por free_swap_and_cache()) acceda\
    \ a la memoria liberada para swap_map. Este es un problema te\xF3rico y no he\
    \ podido provocarlo a partir de un caso de prueba. Pero ha habido un acuerdo basado\
    \ en la revisi\xF3n del c\xF3digo de que esto es posible (ver enlace a continuaci\xF3\
    n). Solucionarlo usando get_swap_device()/put_swap_device(), lo que detendr\xE1\
    \ swapoff(). Hubo una verificaci\xF3n adicional en _swap_info_get() para confirmar\
    \ que la entrada de intercambio no era gratuita. Esto no est\xE1 presente en get_swap_device()\
    \ porque en general no tiene sentido debido a la ejecuci\xF3n entre obtener la\
    \ referencia y el intercambio. As\xED que agregu\xE9 una verificaci\xF3n equivalente\
    \ directamente en free_swap_and_cache(). Detalles de c\xF3mo provocar un posible\
    \ problema (gracias a David Hildenbrand por derivar esto): --8&lt;----- __swap_entry_free()\
    \ podr\xEDa ser el \xFAltimo usuario y dar como resultado \"count == SWAP_HAS_CACHE\"\
    . swapoff-&gt;try_to_unuse() se detendr\xE1 tan pronto como si-&gt;inuse_pages==0.\
    \ Entonces la pregunta es: \xBFalguien podr\xEDa reclamar la publicaci\xF3n y\
    \ activar si-&gt;inuse_pages==0, antes de que completemos swap_page_trans_huge_swapped()?\
    \ Imagine lo siguiente: folio de 2 MiB en el swapcache. S\xF3lo 2 subp\xE1ginas\
    \ siguen siendo referencias mediante entradas de intercambio. El proceso 1 todav\xED\
    a hace referencia a la subp\xE1gina 0 mediante la entrada de intercambio. El proceso\
    \ 2 todav\xEDa hace referencia a la subp\xE1gina 1 mediante la entrada de intercambio.\
    \ El proceso 1 se cierra. Llama a free_swap_and_cache(). -&gt; count == SWAP_HAS_CACHE\
    \ [luego, adelantado en el hipervisor, etc.] El proceso 2 se cierra. Llama a free_swap_and_cache().\
    \ -&gt; count == SWAP_HAS_CACHE El proceso 2 contin\xFAa, pasa swap_page_trans_huge_swapped()\
    \ y llama a __try_to_reclaim_swap(). __try_to_reclaim_swap()-&gt;folio_free_swap()-&gt;delete_from_swap_cache()-&gt;\
    \ put_swap_folio()-&gt;free_swap_slot()-&gt;swapcache_free_entries()-&gt; swap_entry_free()-&gt;swap_range_free()-&gt;\
    \ ... WRITE_ONCE(si-&gt;inuse_pages, si-&gt;inuse_pages - nr_entries); \xBFQu\xE9\
    \ impide que el intercambio tenga \xE9xito despu\xE9s de que el proceso 2 recuper\xF3\
    \ el cach\xE9 de intercambio pero antes de que el proceso 1 terminara su llamada\
    \ a swap_page_trans_huge_swapped()? --8&lt;-----"
id: CVE-2024-26960
lastModified: '2024-06-25T23:15:28.093'
metrics: {}
published: '2024-05-01T06:15:12.323'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/0f98f6d2fb5fad00f8299b84b85b6bc1b6d7d19a
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/1ede7f1d7eed1738d1b9333fd1e152ccb450b86a
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/2da5568ee222ce0541bfe446a07998f92ed1643e
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/363d17e7f7907c8e27a9e86968af0eaa2301787b
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/3ce4c4c653e4e478ecb15d3c88e690f12cbf6b39
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/82b1c07a0af603e3c47b906c8e991dc96f01688e
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/d85c11c97ecf92d47a4b29e3faca714dc1f18d0d
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
