cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    net/sched: act_mirred: use the backlog for mirred ingress


    The test Davide added in commit ca22da2fbd69 ("act_mirred: use the backlog

    for nested calls to mirred ingress") hangs our testing VMs every 10 or so

    runs, with the familiar tcp_v4_rcv -> tcp_v4_rcv deadlock reported by

    lockdep.


    The problem as previously described by Davide (see Link) is that

    if we reverse flow of traffic with the redirect (egress -> ingress)

    we may reach the same socket which generated the packet. And we may

    still be holding its socket lock. The common solution to such deadlocks

    is to put the packet in the Rx backlog, rather than run the Rx path

    inline. Do that for all egress -> ingress reversals, not just once

    we started to nest mirred calls.


    In the past there was a concern that the backlog indirection will

    lead to loss of error reporting / less accurate stats. But the current

    workaround does not seem to address the issue.'
- lang: es
  value: "En el kernel de Linux, se resolvi\xF3 la siguiente vulnerabilidad: net/sched:\
    \ act_mirred: use el trabajo pendiente para el ingreso duplicado. La prueba que\
    \ Davide agreg\xF3 en el compromiso ca22da2fbd69 (\"act_mirred: use el trabajo\
    \ pendiente para llamadas anidadas para el ingreso duplicado\") bloquea nuestras\
    \ m\xE1quinas virtuales de prueba. aproximadamente cada 10 ejecuciones, con el\
    \ conocido punto muerto tcp_v4_rcv -&gt; tcp_v4_rcv informado por lockdep. El\
    \ problema descrito anteriormente por Davide (ver Enlace) es que si invertimos\
    \ el flujo de tr\xE1fico con la redirecci\xF3n (salida -&gt; entrada) podemos\
    \ llegar al mismo socket que gener\xF3 el paquete. Y es posible que todav\xED\
    a estemos sosteniendo el bloqueo del enchufe. La soluci\xF3n com\xFAn a estos\
    \ puntos muertos es colocar el paquete en el trabajo pendiente de Rx, en lugar\
    \ de ejecutar la ruta de Rx en l\xEDnea. Haga eso para todas las reversiones de\
    \ salida -&gt; entrada, no solo una vez que comenzamos a anidar llamadas reflejadas.\
    \ En el pasado, exist\xEDa la preocupaci\xF3n de que la direcci\xF3n indirecta\
    \ del trabajo pendiente provocara la p\xE9rdida de informes de errores o estad\xED\
    sticas menos precisas. Pero la soluci\xF3n actual no parece solucionar el problema."
id: CVE-2024-26740
lastModified: '2024-04-03T17:24:18.150'
metrics: {}
published: '2024-04-03T17:15:51.410'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/52f671db18823089a02f07efc04efdb2272ddc17
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/60ddea1600bc476e0f5e02bce0e29a460ccbf0be
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  url: https://git.kernel.org/stable/c/7c787888d164689da8b1b115f3ef562c1e843af4
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Awaiting Analysis
