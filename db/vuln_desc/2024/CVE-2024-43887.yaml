configurations:
- nodes:
  - cpeMatch:
    - criteria: cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*
      matchCriteriaId: D074AE50-4A5E-499C-A2FD-75FD60DEA560
      versionEndExcluding: 6.10.5
      versionStartIncluding: '6.7'
      vulnerable: true
    - criteria: cpe:2.3:o:linux:linux_kernel:6.11:rc1:*:*:*:*:*:*
      matchCriteriaId: 8B3CE743-2126-47A3-8B7C-822B502CF119
      vulnerable: true
    - criteria: cpe:2.3:o:linux:linux_kernel:6.11:rc2:*:*:*:*:*:*
      matchCriteriaId: 4DEB27E7-30AA-45CC-8934-B89263EF3551
      vulnerable: true
    negate: false
    operator: OR
cveTags: []
descriptions:
- lang: en
  value: 'In the Linux kernel, the following vulnerability has been resolved:


    net/tcp: Disable TCP-AO static key after RCU grace period


    The lifetime of TCP-AO static_key is the same as the last

    tcp_ao_info. On the socket destruction tcp_ao_info ceases to be

    with RCU grace period, while tcp-ao static branch is currently deferred

    destructed. The static key definition is

    : DEFINE_STATIC_KEY_DEFERRED_FALSE(tcp_ao_needed, HZ);


    which means that if RCU grace period is delayed by more than a second

    and tcp_ao_needed is in the process of disablement, other CPUs may

    yet see tcp_ao_info which atent dead, but soon-to-be.

    And that breaks the assumption of static_key_fast_inc_not_disabled().


    See the comment near the definition:

    > * The caller must make sure that the static key can''t get disabled while

    > * in this function. It doesn''t patch jump labels, only adds a user to

    > * an already enabled static key.


    Originally it was introduced in commit eb8c507296f6 ("jump_label:

    Prevent key->enabled int overflow"), which is needed for the atomic

    contexts, one of which would be the creation of a full socket from a

    request socket. In that atomic context, it''s known by the presence

    of the key (md5/ao) that the static branch is already enabled.

    So, the ref counter for that static branch is just incremented

    instead of holding the proper mutex.

    static_key_fast_inc_not_disabled() is just a helper for such usage

    case. But it must not be used if the static branch could get disabled

    in parallel as it''s not protected by jump_label_mutex and as a result,

    races with jump_label_update() implementation details.


    Happened on netdev test-bot[1], so not a theoretical issue:


    [] jump_label: Fatal kernel bug, unexpected op at tcp_inbound_hash+0x1a7/0x870
    [ffffffffa8c4e9b7] (eb 50 0f 1f 44 != 66 90 0f 1f 00)) size:2 type:1

    [] ------------[ cut here ]------------

    [] kernel BUG at arch/x86/kernel/jump_label.c:73!

    [] Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN NOPTI

    [] CPU: 3 PID: 243 Comm: kworker/3:3 Not tainted 6.10.0-virtme #1

    [] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.3-0-ga6ed6b701f0a-prebuilt.qemu.org
    04/01/2014

    [] Workqueue: events jump_label_update_timeout

    [] RIP: 0010:__jump_label_patch+0x2f6/0x350

    ...

    [] Call Trace:

    []  <TASK>

    []  arch_jump_label_transform_queue+0x6c/0x110

    []  __jump_label_update+0xef/0x350

    []  __static_key_slow_dec_cpuslocked.part.0+0x3c/0x60

    []  jump_label_update_timeout+0x2c/0x40

    []  process_one_work+0xe3b/0x1670

    []  worker_thread+0x587/0xce0

    []  kthread+0x28a/0x350

    []  ret_from_fork+0x31/0x70

    []  ret_from_fork_asm+0x1a/0x30

    []  </TASK>

    [] Modules linked in: veth

    [] ---[ end trace 0000000000000000 ]---

    [] RIP: 0010:__jump_label_patch+0x2f6/0x350


    [1]: https://netdev-3.bots.linux.dev/vmksft-tcp-ao-dbg/results/696681/5-connect-deny-ipv6/stderr'
- lang: es
  value: "En el kernel de Linux, se resolvi\xF3 la siguiente vulnerabilidad: net/tcp:\
    \ deshabilite la clave est\xE1tica TCP-AO despu\xE9s del per\xEDodo de gracia\
    \ de RCU. La vida \xFAtil de TCP-AO static_key es la misma que la del \xFAltimo\
    \ tcp_ao_info. En la destrucci\xF3n del socket, tcp_ao_info deja de tener un per\xED\
    odo de gracia de RCU, mientras que la rama est\xE1tica tcp-ao actualmente se retrasa\
    \ su destrucci\xF3n. La definici\xF3n de clave est\xE1tica es: DEFINE_STATIC_KEY_DEFERRED_FALSE(tcp_ao_needed,\
    \ HZ); lo que significa que si el per\xEDodo de gracia de la RCU se retrasa m\xE1\
    s de un segundo y tcp_ao_needed est\xE1 en proceso de deshabilitaci\xF3n, es posible\
    \ que otras CPU a\xFAn vean tcp_ao_info, que est\xE1 muerto, pero pronto lo estar\xE1\
    . Y eso rompe la suposici\xF3n de static_key_fast_inc_not_disabled(). Vea el comentario\
    \ cerca de la definici\xF3n: &gt; * El que llama debe asegurarse de que la clave\
    \ est\xE1tica no puede conseguir desactivada mientras &gt; * est\xE1 en esta funci\xF3\
    n. No parchea etiquetas de salto, s\xF3lo agrega un usuario a &gt; * una clave\
    \ est\xE1tica ya habilitada. Originalmente se introdujo en el commit eb8c507296f6\
    \ (\"jump_label: Prevent key-&gt;enabled int overflow\"), que es necesaria para\
    \ los contextos at\xF3micos, uno de los cuales ser\xEDa la creaci\xF3n de un socket\
    \ completo a partir de un socket de solicitud. En ese contexto at\xF3mico, se\
    \ sabe por la presencia de la clave (md5/ao) que la rama est\xE1tica ya est\xE1\
    \ habilitada. Entonces, el contador de referencia para esa rama est\xE1tica simplemente\
    \ se incrementa en lugar de mantener el mutex adecuado. static_key_fast_inc_not_disabled()\
    \ es solo una ayuda para tal caso de uso. Pero no debe usarse si la rama est\xE1\
    tica podr\xEDa deshabilitarse en paralelo ya que no est\xE1 protegida por jump_label_mutex\
    \ y, como resultado, corre con los detalles de implementaci\xF3n de jump_label_update().\
    \ Sucedi\xF3 en netdev test-bot[1], por lo que no es un problema te\xF3rico: []\
    \ jump_label: error fatal del kernel, operaci\xF3n inesperada en tcp_inbound_hash+0x1a7/0x870\
    \ [ffffffffa8c4e9b7] (eb 50 0f 1f 44 != 66 90 0f 1f 00)) tama\xF1o:2 tipo:1 []\
    \ ------------[ cortar aqu\xED ]------------ [] ERROR del kernel en arch/x86/kernel/jump_label.c\
    \ :73! [] Ups: c\xF3digo de operaci\xF3n no v\xE1lido: 0000 [#1] PREEMPT SMP KASAN\
    \ NOPTI [] CPU: 3 PID: 243 Comm: kworker/3:3 Not tainted 6.10.0-virtme #1 [] Nombre\
    \ del hardware: PC est\xE1ndar QEMU (i440FX + PIIX, 1996), BIOS rel-1.16.3-0-ga6ed6b701f0a-prebuilt.qemu.org\
    \ 01/04/2014 [] Cola de trabajo: eventos jump_label_update_timeout [] RIP: 0010:__jump_label_patch+0x2f6/0x350...\
    \ [] Llamada Seguimiento: []  [] arch_jump_label_transform_queue+0x6c/0x110 []\
    \ __jump_label_update+0xef/0x350 [] __static_key_slow_dec_cpuslocked.part.0+0x3c/0x60\
    \ [] jump_label_update_timeout+0x2c/0x40 [] 0x1670 [] hilo_trabajador+ 0x587/0xce0\
    \ [] kthread+0x28a/0x350 [] ret_from_fork+0x31/0x70 [] ret_from_fork_asm+0x1a/0x30\
    \ []  [] M\xF3dulos vinculados en: veth [] ---[ end trace 0000000000000000 ]---\
    \ [] RIP: 0010:__jump_label_patch+0x2f6/0x350 [1]: https://netdev-3.bots.linux.dev/vmksft-tcp-ao-dbg/results/696681/5-connect-deny-ipv6/stderr"
id: CVE-2024-43887
lastModified: '2024-09-05T19:43:44.197'
metrics:
  cvssMetricV31:
  - cvssData:
      attackComplexity: HIGH
      attackVector: LOCAL
      availabilityImpact: HIGH
      baseScore: 4.7
      baseSeverity: MEDIUM
      confidentialityImpact: NONE
      integrityImpact: NONE
      privilegesRequired: LOW
      scope: UNCHANGED
      userInteraction: NONE
      vectorString: CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H
      version: '3.1'
    exploitabilityScore: 1.0
    impactScore: 3.6
    source: nvd@nist.gov
    type: Primary
published: '2024-08-26T11:15:03.877'
references:
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  tags:
  - Patch
  url: https://git.kernel.org/stable/c/14ab4792ee120c022f276a7e4768f4dcb08f0cdd
- source: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
  tags:
  - Patch
  url: https://git.kernel.org/stable/c/954d55a59b2501f4a9bd693b40ce45a1c46cb2b3
sourceIdentifier: 416baaa9-dc9f-4396-8d5f-8c081fb06d67
vulnStatus: Analyzed
weaknesses:
- description:
  - lang: en
    value: NVD-CWE-noinfo
  source: nvd@nist.gov
  type: Primary
